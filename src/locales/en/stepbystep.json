{
  "instruction": {
    "enter_numbers": "Enter any two positive integers and click the 'Next' button."
  },
  "button": {
    "next": "Next",
    "back": "Back"
  },
  "addition": {
    "step_intro": "Start adding from the Units column.",
    "step_normal_with_remember": "Step {{step}}: {{d1}} + {{d2}} + {{carry}} = {{sum}}, write {{resultDigit}}, and carry {{carryOut}}.",
    "step_normal_with_carry": "Step {{step}}: {{d1}} + {{d2}} = {{sum}}, greater than 10, write {{resultDigit}}, and carry {{carry}}.",
    "step_normal_no_carry": "Step {{step}}: {{d1}} + {{d2}} = {{sum}}, write {{resultDigit}}, no carry needed.",
    "step_final_carry": "Step {{step}}: All digits have been added, but there's still a carry of {{carry}}, so write it into the next column."
    "step_normal_with_remember": "Step {{step}}: {{d1}} + {{d2}} + {{carry}} = {{sum}}, write {{resultDigit}}, and carry {{carryOut}}.",
    "step_normal_with_carry": "Step {{step}}: {{d1}} + {{d2}} = {{sum}}, greater than 10, write {{resultDigit}}, and carry {{carry}}.",
    "step_normal_no_carry": "Step {{step}}: {{d1}} + {{d2}} = {{sum}}, write {{resultDigit}}, no carry needed.",
    "step_final_carry": "Step {{step}}: All digits have been added, but there's still a carry of {{carry}}, so write it into the next column."
  },
  "subtraction": {
    "error_min_lt_sub": "Cannot subtract: the minuend is smaller than the subtrahend.",
    "step_intro": "Let's perform subtraction step by step!",
    "step_borrow_1": "Step {{step}} column ({{label}}): {{a}} is smaller than {{b}}, so we borrow a ten to make it {{adjustedA}}.",
    "step_borrow_2": "We have: {{adjustedA}} - {{adjustedB}} = {{result}}, write {{result}}",
    "step_normal": "Step {{step}} column ({{label}}): {{a}} - {{b}} = {{result}}.",
    "step_normal_with_payback": "Step {{step}} column ({{label}}): {{a}} - {{b}} = {{result}}",
    "step_payback": "(Paying back 1 borrowed in the previous step to {{b}})",
    "final_result": "Final result: {{number1}} - {{number2}} = {{result}}.",
    "remember_borrowing": "Remember, if there isn’t enough to subtract, you must borrow 1 from the next column!"
  },
  "multiplication": {
    "step_intro": "Step {{step}}: Multiply the {{label}} digit of the multiplier by each digit of the multiplicand from right to left.",
    "step_zero_rule": "Each time we multiply, the result shifts one column to the right!",
    "step_detail_with_carry": "{{d2}} × {{d1}} = {{product}} → write {{digitCarry}}, carry {{nextCarry}}",
    "step_detail_with_next": "{{d2}} × {{d1}} = {{product}} → write {{digit}}, carry {{nextCarry}}",
    "step_detail_no_carry": "{{d2}} × {{d1}} = {{product}} → write {{digit}}",
    "remember": ", carry {{nextCarry}}",
    "first_add_note": "Finally, we add all partial products together.\n",
    "step_add_column": "{{finalNote}}Column {{label}}: {{digits}} + carry {{carry}} = {{sum}} → write {{digit}}, carry {{nextCarry}}",
    "step_final_carry": "Final carry: write {{carry}} to the highest place value.",
    "step_final_title": "Final step: Add all partial products column by column:",
    "final_result": "→ Final result: {{expression}} = {{result}}",
    "summary": "To find the final result, add up the partial products:\n{{partials}}\n→ {{expression}} = {{result}}",
    "partial": "Partial row",
    "step_multiply_only": "{{d1}} × {{d2}} = {{product}}",
    "step_digit_carry": "Common step",
    "shift_zero": "Since this is the {{label}} digit, we add one zero at the end of the result.",
    "step_detail_mul": "{{d2}} × {{d1}} = {{mul}}",
    "step_detail_carry": "{{mul}} + carry {{carry}} = {{product}} → write {{digit}}, carry {{nextCarry}}",
    "step_detail_final_digit": "{{d1}} × {{d2}} = {{product}} → write the full {{product}}",
    "step_detail_final": "Since this is the last digit in this multiplication row, we write the full result: {{d1}} × {{d2}} = {{product}}",
    "step_carry_final_add": "Then add the carry from the previous step: {{product}} + {{carry}} = {{sum}} → write {{nextDigit}}, carry {{nextCarry}}",
    "step_carry_final_add_last": "{{product}} plus carry {{carry}} equals {{sum}} → write {{sum}}, no further carry since this is the last digit of {{d2}} x {{str1}}.",
    "reveal_digit": "Result: {{product}}",
    "number_text": {
      "0": "zero",
      "1": "one",
      "2": "two",
      "3": "three",
      "4": "four",
      "5": "five"
    }
  },
  "place": {
    "units": "Units",
    "tens": "Tens",
    "hundreds": "Hundreds",
    "thousands": "Thousands",
    "ten_thousands": "Ten-thousands",
    "hundred_thousands": "Hundred-thousands",
    "millions": "Millions",
    "ten_millions": "Ten-millions",
    "hundred_millions": "Hundred-millions",
    "billions": "Billions"
  },
  "error": {
    "invalid_input": "Please enter a valid positive integer."
  },
  "calculation": "Calculation",
  "calculation_steps": "Calculation steps",
  "step1_title": "Step 1: Arrange the numbers vertically",
  "step1_description": "Write {{number1}} and {{number2}} so that the digits align in columns.",
  "step1_subText": "Press (Next) to see detailed calculation steps.",
  "step3_title": "Final result of the calculation",
  "step3_description": "{{n1Str}} {{operator}} {{n2Str}} is: ",
  "add_title": "Step 2: Add the digits",
  "add_description": "Align the numbers correctly in columns and add from right to left.",
  "sub_title": "Step 2: Subtract the digits",
  "sub_description": "Align the numbers correctly in columns and subtract from right to left.",
  "mul_title": "Step 2: Multiply step by step",
  "mul_description": "We will multiply {{number1}} by {{number2}} from right to left, one digit at a time.",
  "div_title": "Step 2: Start dividing",
  "div_description": "Divide {{number1}} by {{number2}}, starting from the leftmost digit.",
  "invalid_title": "Invalid operation",
  "invalid_description": "Please select a valid operation.",
  "horizontal": "Horizontal layout",
  "vertical": "Vertical layout",
  "skills": {
    "addition": "Addition:",
    "subtraction": "Subtraction:",
    "multiplication": "Multiplication:",
    "division": "Division:"
  },
  "speech": {
    "selectOperator": "You selected {{operator}}. Please enter a new number."
  },
  "step_main": "Step {{step}}: {{current}} divided by {{divisor}} equals {{result}}. Write {{result}} in the quotient. {{result}} × {{divisor}} = {{sub}}, then subtract: {{current}} - {{sub}} = {{remainder}}.",
  "step_smaller_and_bring_down": "Step {{step}}: {{current}} is smaller than {{divisor}}, cannot divide yet. Bring down {{nextDigit}} to get {{afterBringDown}}.",
  "step_smaller_write_zero": "Step {{step}}: {{current}} is smaller than {{divisor}}, write 0 in the quotient.",
  "step_cannot_divide": "Step {{step}}: {{dividend}} is smaller than {{divisor}}, cannot divide. Write 0.",
  "step_compare_less": "Step {{step}}: {{current}} is smaller than {{divisor}}, not enough to divide.",
  "step_bring_down": "Step {{step}}: Bring down {{nextDigit}}, now we have {{afterBringDown}}.",
  "step_divide": "Step {{step}}: Find the number that when multiplied by {{divisor}} is closest to {{current}} without exceeding it. {{divisor}} × {{result}} = {{product}}. So the quotient digit is {{result}}.",
  "step_multiply": "Step {{step}}: Multiply {{result}} by {{divisor}} to get {{product}}.",
  "step_subtract": "Step {{step}}: Subtract {{product}} from {{current}} to get {{remainder}}.",
  "step_choose_number": "Step {{step}}: {{current}} {{comparison}} {{divisor}}, {{explanation}}",
  "comparison.less": "is less than",
  "comparison.greater_equal": "is greater than or equal to",
  "explanation.less": "cannot divide yet. Take more digits.",
  "explanation.greater_equal": "can divide. Proceed with division.",
  "step_bring_down_after_subtract": "Step {{step}}: After subtracting, the remainder is {{remainder}}. Bring down {{nextDigit}}, we get {{afterBringDown}} to continue dividing.",
  "result_with_remainder": "{{quotient}} remainder {{remainder}}"
}
